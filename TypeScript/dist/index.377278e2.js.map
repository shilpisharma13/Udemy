{"mappings":"AAAA,aAAa;AAeb,MAAM,MAAc;IAClB,+DAA+D;IAC/D,kEAAkE;IAClE,MAAM;IACN,OAAO,IAAI;IACX,OAAO;AACT;AAIA,SAAS,KAAK,CAAiB,EAAE,CAAiB,EAAE;IAClD,IAAI,OAAO,MAAM,YAAY,OAAO,MAAM,UAAU,OAAO,IAAI;IAC/D,OAAO,EAAE,QAAQ,KAAK,EAAE,QAAQ;AAClC;AAEA,kDAAkD;AAElD,IAAI,OAAO,CAAC,GAAmB,IAAsB;IACnD,OAAO,IAAI;AACb;IAWA;UAAK,KAAK;IAAL,MACH,cAAA;IADG,MAEH,cAAA;IAFG,MAGH,YAAA;GAHG,UAAA","sources":["src/index.ts"],"sourcesContent":["//Union types\n\ntype Dog = {\n  name: string\n  barks: boolean\n  likes: string\n}\ntype Cat = {\n  name: string\n  meows: boolean\n}\n\ntype DogCat = Dog | Cat // union types\ntype DognCat = Dog & Cat // intersection types - will have all common and unique properties i.e.3 properties\n\nconst dog: DogCat = {\n  //should have at least all fields of one object for union types\n  //intersection types should have all unique plus common properties\n  name: 'Trevor',\n  barks: true,\n  likes: 'bones',\n}\n\ntype stringOrNumber = number | string\n\nfunction sum2(a: stringOrNumber, b: stringOrNumber) {\n  if (typeof a === 'number' && typeof b === 'number') return a + b\n  return a.toString() + b.toString()\n}\n\n// console.log(sum2('Mark', null)) // throws error\n\nlet sum3 = (a: stringOrNumber, b: stringOrNumber) => {\n  return a + b\n}\n\n//index signature\n\ntype Airplanes = {\n  flightNumber: string\n  dateOfDeparture: string\n  seats: {\n    [key: string]: string\n  }\n}\nenum Types {\n  national = 'national',\n  academic = 'academic',\n  public = 'public',\n}\n\ntype TypeOfLib = 'national' | 'academic' | 'public'\n\ntype Book = {\n  title: string\n  pages: number\n  isbn: string\n}\n\ntype Member = {\n  name: string\n  phone: string\n  [key: string]: string\n}\n\ntype Library = {\n  name: string\n  address: string\n  numberOfBooks: number\n  type: Types\n  books: Book[]\n  genres: string[]\n  members: Member[]\n}\n"],"names":[],"version":3,"file":"index.377278e2.js.map","sourceRoot":"../"}